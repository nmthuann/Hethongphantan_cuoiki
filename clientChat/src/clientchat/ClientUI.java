package clientchat;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */

import java.io.*;
import java.io.IOException;
import java.net.Socket;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author MEP-LAPTOP
 */
public class ClientUI extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    
    static ClientUI instance = null;
    private String name = "";
    
    public static ClientUI getInstance()
    {
        if (instance == null)
            return instance = new ClientUI();
        return instance;
    }
    
    public ClientUI() {
        initComponents();
        instance = this;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        nameTXT = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Infomation");
        setBackground(new java.awt.Color(204, 204, 204));
        setResizable(false);

        jButton1.setFont(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        jButton1.setText("Join Group");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        jLabel3.setText("Username:");

        nameTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTXTActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        jButton4.setText("Create Group");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe Print", 0, 18)); // NOI18N
        jLabel4.setText("IP:");

        txtIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(66, 66, 66))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(95, 95, 95))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4))
                .addGap(36, 36, 36))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (clientThread.getInstance().getSocket() != null)
            {
                clientThread.getInstance().getSocket().close();
                clientThread.getInstance().setSocket(null);
            }
                
        } catch (IOException ex) {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (nameTXT.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Không được để trống tên người dùng", "Error" , JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            Socket socket = new Socket(txtIP.getText().trim(), 9090);

            DataInputStream din = new DataInputStream(socket.getInputStream());
            DataOutputStream dout = new DataOutputStream(socket.getOutputStream());
            
            clientThread.getInstance().setSocket(socket);
            clientThread.getInstance().setDin(din);
            clientThread.getInstance().setDout(dout);

            //new inputInfo().setVisible(true);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Lỗi kết nối, vui lòng thử lại!", "Error" , JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            //client.getInstance().setVisible(false);     
            
            //mssv = mssvTXT.getText().trim();
            name = nameTXT.getText().trim();
            
            //clientThread.getInstance().getDout().writeUTF(Base64.getEncoder().encodeToString(mssv.getBytes()));
            clientThread.getInstance().getDout().writeUTF(Base64.getEncoder().encodeToString(name.getBytes()));
            clientThread.getInstance().getDout().writeUTF(Base64.getEncoder().encodeToString("join".getBytes()));
            String tmp = new String(
                    Base64.getDecoder().decode(
                            clientThread.getInstance().getDin().readUTF())); // option
            
            
            
            //clientThread.getInstance().setMssvSV(mssv);
            clientThread.getInstance().setNameSV(name);            
                  
            
            this.setVisible(false);   
         
            if (tmp.equals("0")){
                clientThread.getInstance().setCodeRoom(
                    new String(Base64.getDecoder().decode(
                            clientThread.getInstance().getDin().readUTF()))); // code room
                ChatUI.getInstance().setVisible(true);
            }
            else
                new ChatRoomCode().setVisible(true);
                //new ChatRoomCodeNew().setVisible(true);
        } catch (IOException ex) {
            //Logger.getLogger(inputInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nameTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTXTActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
             // TODO add your handling code here:
        try {
            if (clientThread.getInstance().getSocket() != null)
            {
                clientThread.getInstance().getSocket().close();
                clientThread.getInstance().setSocket(null);
            }
                
        } catch (IOException ex) {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (nameTXT.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Không được để trống tên người dùng", "Error" , JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            Socket socket = new Socket(txtIP.getText().trim(), 9090);
            DataInputStream din = new DataInputStream(socket.getInputStream());
            DataOutputStream dout = new DataOutputStream(socket.getOutputStream());
            
            clientThread.getInstance().setSocket(socket);
            clientThread.getInstance().setDin(din);
            clientThread.getInstance().setDout(dout);

            //new inputInfo().setVisible(true);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Lỗi kết nối, vui lòng thử lại!", "Error" , JOptionPane.ERROR_MESSAGE);
        }
        try {
            //client.getInstance().setVisible(false);     
            
            //mssv = mssvTXT.getText().trim();
            name = nameTXT.getText().trim();
            
            //clientThread.getInstance().getDout().writeUTF(Base64.getEncoder().encodeToString(mssv.getBytes()));
            clientThread.getInstance().getDout().writeUTF(Base64.getEncoder().encodeToString(name.getBytes()));
            clientThread.getInstance().getDout().writeUTF(Base64.getEncoder().encodeToString("create".getBytes()));
//            String tmp = new String(
//                    Base64.getDecoder().decode(
//                            clientThread.getInstance().getDin().readUTF())); // option
//            
            clientThread.getInstance().setCodeRoom(
                    new String(Base64.getDecoder().decode(
                            clientThread.getInstance().getDin().readUTF()))); // code room
            
            //clientThread.getInstance().setMssvSV(mssv);
            clientThread.getInstance().setNameSV(name);            
                  
            
            this.setVisible(false);   
         
//            if (tmp.equals("0"))
                ChatUI.getInstance().setVisible(true);
//            else
//                new ChatRoomCode().setVisible(true);
//                //new ChatRoomCodeNew().setVisible(true);
        
        } catch (IOException ex) {
            //Logger.getLogger(inputInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField nameTXT;
    private javax.swing.JTextField txtIP;
    // End of variables declaration//GEN-END:variables

}
